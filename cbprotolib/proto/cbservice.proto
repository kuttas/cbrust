syntax = "proto3";
package cbservice;

service ComputeBroker {
    rpc AddHost (AddHostRequest) returns (AddHostResponse);
    rpc GetHostInfo (GetHostInfoRequest) returns (GetHostInfoResponse);
    rpc ListHosts (ListHostsRequest) returns (ListHostsResponse);

    // Flag a healthy host for maintenance.
    rpc MaintainHost (MaintainHostRequest) returns (MaintainHostResponse);
}

enum HostAllocationState {
    // Reserve 0 (uninitialized) for invalid; no host can ever be in this state.
    HOST_ALLOCATION_STATE_INVALID = 0;
    // Host is likely new and has not yet been initially provisioned.
    // Hosts in this state can not be allocated.
    // TODO: can a host re-enter this state?
    HOST_ALLOCATION_STATE_UNPROVISIONED = 1;
    // Host is provisioned and usable, but not allocated to any pool.
    HOST_ALLOCATION_STATE_UNALLOCATED = 2;
    // Host is allocated to a pool and (likely) in use.
    HOST_ALLOCATION_STATE_ALLOCATED = 3;
}

enum HostHealthState {
    // Reserve 0 (uninitialized) for invalid; no host can ever be in this state.
    HOST_HEALTH_STATE_INVALID = 0;
    // Host is healthy and can be used (independent of whether it's actually allocated)
    HOST_HEALTH_STATE_GOOD = 1;
    // Host currently needs maintenance (but may still be allocated to a pool)
    HOST_HEALTH_STATE_NEEDS_MAINTENANCE = 2;
    // Host is currently undergoing maintenance (but may still be allocated to a pool)
    HOST_HEALTH_STATE_IN_MAINTENANCE = 3;
}

message AddHostRequest {
    HostInfo host_info = 1;
}

message AddHostResponse {
}

message GetHostInfoRequest {
    string hostname = 1;
}

message HostInfo {
    string id = 1;
    string hostname = 2;
    string info = 3;

    HostAllocationState alloc_state = 4;
    HostHealthState health_state = 5;
}

message GetHostInfoResponse {
    HostInfo host_info = 1;
}

message ListHostsRequest {
}

message ListHostsResponse {
    repeated HostInfo host_infos = 1;
}

message MaintainHostRequest {
    string hostname = 1; // TODO: should probably take UUID if this was production code.
}

message MaintainHostResponse {
}
